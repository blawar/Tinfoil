{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Tinfoil Documentation","title":"Home"},{"location":"#tinfoil-documentation","text":"","title":"Tinfoil Documentation"},{"location":"custom_index/","text":"A custom Tinfoil index is a special JSON file that contains a list of a files, directories, and other special parameters. To load this index, you can either serve it over a http web server, or you can name it *.tfl and place it in any directory that Tinfoil scans. Basic Format { \"files\": [\"https://url1\", \"sdmc:/url2\", \"http://url3\"], \"directories\": [\"https://url1\", \"sdmc:/url2\", \"http://url3\"], \"success\": \"motd text here\" } Detailed Format { \"files\": [ { \"url\": \"https://url1\", \"size\": 1000 }, { \"url\": \"https://url2\", \"size\": 3000 }, { \"url\": \"https://url3\", \"size\": 5000 } ], \"directories\": [\"https://url1\", \"sdmc:/url2\", \"http://url3\"], \"success\": \"motd text here\" } Overriding File Names In Urls Some urls, like gdrive, do not have the correct filename in the URL. You can tell tinfoil to use a specified filename by using the shebang: gdrive:/abc102234098#filename.nsp Message of the Day You can specify a message to be presented to the user by setting either the \"success\" or \"error\" json key. { \"success\": \"hello world\" } Referrer If serving the index over http, you may specify a referrer to prevent others from hotlinking using the \"referrer\" json key. { \"referrer\": \"http://mydomain.com/index.tfl\" } Google API Key You may specify a google API key to be used with all gdrive:/ requests using the \"googleApiKey\" json key. { \"googleApiKey\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\" } 1Fichier API Key You may specify a 1Fichier API key to be used with all 1f:/ requests using the \"oneFichierKeys\" json key. If multiple keys are provided, Tinfoil keeps trying them until it finds one that works. { \"oneFichierKeys\": [\"ap1key1\", \"apikey2\", \"apikey3\"] } Custom HTTP Headers You may specify custom HTTP headers to be sent with Tinfoil requests using the \"headers\" json key. { \"headers\": [\"My-Custom_header: hello\", \"My-Custom_header2: world\"] } Minimum Tinfoil Version Required You can specify a minimum Tinfoil version to load the index using the \"version\" json key. { \"version\": 7.00 } Client Certificate You may specify a client certificate using \"clientCertPub\" and \"clientCertKey\" json keys. { \"clientCertPub\": \"-----BEGIN PUBLIC KEY----- ....\", \"clientCertKey\": \"-----BEGIN PRIVATE KEY----- ....\" } Theme Blacklist You may specify a list of themes to blacklist based on their hash using the \"themeBlackList\" json key: { \"themeBlackList\": [\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\", \"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\"] } Theme Whitelist You may specify a list of themes to whitelist based on their hash using the \"themeWhiteList\" json key: { \"themeWhiteList\": [\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\", \"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\"] } Custom Theme Error Message You may specify a custom theme error message using the \"themeError\" json key: { \"themeError\": \"please select an authorized theme.\" } Adding User Locations You may add a new location permenently to the user's File Browser using the \"locations\" json key: { \"locations\": [ \"https://abc123.com/456/\", {\"url\": \"https://xyz.com/blah\", \"title\": \"xyz\", \"action\"=\"disable\"}, {\"url\": \"https://xyz.com/blah2\", \"title\": \"xyz2\", \"action\"=\"enable\"}, {\"url\": \"https://xyz.com/blah3\", \"title\": \"xyz3\", \"action\"=\"add\"} ] } Adding Metadata You may add or modify title metadata using the \"titledb\" json key: { \"titledb\": { \"050000BADDAD0000\": { \"id\": \"050000BADDAD0000\", \"name\": \"Tinfoil\", \"version\": 0, \"region\": \"US\", \"releaseDate\": 20180801, \"rating\": 10, \"publisher\": \"N/A\", \"description\": \"Nintendo Switch Title Manager\", \"size\": 14000000, \"rank\": 1 } } } Setting Permenent Custom Http Headers Any file http request can contain the header \"x-set-header\" which will set a global http header for all subsequent file http requests. The value should be url encoded: \"x-set-header: MyCustomHeader%3A%20hello%20world\" Setting Temporary Custom Http Headers Any file http request can contain the header \"x-tmp-header\" which will set a temporary header good only for the current request. This only works if the headers are set and then a 301 or 302 redirect is issued. This is functionally a per-file-http header. The value should be url encoded: \"x-tmp-header: MyCustomHeader%3A%20hello%20world\"","title":"Custom Index"},{"location":"custom_index/#basic-format","text":"{ \"files\": [\"https://url1\", \"sdmc:/url2\", \"http://url3\"], \"directories\": [\"https://url1\", \"sdmc:/url2\", \"http://url3\"], \"success\": \"motd text here\" }","title":"Basic Format"},{"location":"custom_index/#detailed-format","text":"{ \"files\": [ { \"url\": \"https://url1\", \"size\": 1000 }, { \"url\": \"https://url2\", \"size\": 3000 }, { \"url\": \"https://url3\", \"size\": 5000 } ], \"directories\": [\"https://url1\", \"sdmc:/url2\", \"http://url3\"], \"success\": \"motd text here\" }","title":"Detailed Format"},{"location":"custom_index/#overriding-file-names-in-urls","text":"Some urls, like gdrive, do not have the correct filename in the URL. You can tell tinfoil to use a specified filename by using the shebang: gdrive:/abc102234098#filename.nsp","title":"Overriding File Names In Urls"},{"location":"custom_index/#message-of-the-day","text":"You can specify a message to be presented to the user by setting either the \"success\" or \"error\" json key. { \"success\": \"hello world\" }","title":"Message of the Day"},{"location":"custom_index/#referrer","text":"If serving the index over http, you may specify a referrer to prevent others from hotlinking using the \"referrer\" json key. { \"referrer\": \"http://mydomain.com/index.tfl\" }","title":"Referrer"},{"location":"custom_index/#google-api-key","text":"You may specify a google API key to be used with all gdrive:/ requests using the \"googleApiKey\" json key. { \"googleApiKey\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\" }","title":"Google API Key"},{"location":"custom_index/#1fichier-api-key","text":"You may specify a 1Fichier API key to be used with all 1f:/ requests using the \"oneFichierKeys\" json key. If multiple keys are provided, Tinfoil keeps trying them until it finds one that works. { \"oneFichierKeys\": [\"ap1key1\", \"apikey2\", \"apikey3\"] }","title":"1Fichier API Key"},{"location":"custom_index/#custom-http-headers","text":"You may specify custom HTTP headers to be sent with Tinfoil requests using the \"headers\" json key. { \"headers\": [\"My-Custom_header: hello\", \"My-Custom_header2: world\"] }","title":"Custom HTTP Headers"},{"location":"custom_index/#minimum-tinfoil-version-required","text":"You can specify a minimum Tinfoil version to load the index using the \"version\" json key. { \"version\": 7.00 }","title":"Minimum Tinfoil Version Required"},{"location":"custom_index/#client-certificate","text":"You may specify a client certificate using \"clientCertPub\" and \"clientCertKey\" json keys. { \"clientCertPub\": \"-----BEGIN PUBLIC KEY----- ....\", \"clientCertKey\": \"-----BEGIN PRIVATE KEY----- ....\" }","title":"Client Certificate"},{"location":"custom_index/#theme-blacklist","text":"You may specify a list of themes to blacklist based on their hash using the \"themeBlackList\" json key: { \"themeBlackList\": [\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\", \"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\"] }","title":"Theme Blacklist"},{"location":"custom_index/#theme-whitelist","text":"You may specify a list of themes to whitelist based on their hash using the \"themeWhiteList\" json key: { \"themeWhiteList\": [\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\", \"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\"] }","title":"Theme Whitelist"},{"location":"custom_index/#custom-theme-error-message","text":"You may specify a custom theme error message using the \"themeError\" json key: { \"themeError\": \"please select an authorized theme.\" }","title":"Custom Theme Error Message"},{"location":"custom_index/#adding-user-locations","text":"You may add a new location permenently to the user's File Browser using the \"locations\" json key: { \"locations\": [ \"https://abc123.com/456/\", {\"url\": \"https://xyz.com/blah\", \"title\": \"xyz\", \"action\"=\"disable\"}, {\"url\": \"https://xyz.com/blah2\", \"title\": \"xyz2\", \"action\"=\"enable\"}, {\"url\": \"https://xyz.com/blah3\", \"title\": \"xyz3\", \"action\"=\"add\"} ] }","title":"Adding User Locations"},{"location":"custom_index/#adding-metadata","text":"You may add or modify title metadata using the \"titledb\" json key: { \"titledb\": { \"050000BADDAD0000\": { \"id\": \"050000BADDAD0000\", \"name\": \"Tinfoil\", \"version\": 0, \"region\": \"US\", \"releaseDate\": 20180801, \"rating\": 10, \"publisher\": \"N/A\", \"description\": \"Nintendo Switch Title Manager\", \"size\": 14000000, \"rank\": 1 } } }","title":"Adding Metadata"},{"location":"custom_index/#setting-permenent-custom-http-headers","text":"Any file http request can contain the header \"x-set-header\" which will set a global http header for all subsequent file http requests. The value should be url encoded: \"x-set-header: MyCustomHeader%3A%20hello%20world\"","title":"Setting Permenent Custom Http Headers"},{"location":"custom_index/#setting-temporary-custom-http-headers","text":"Any file http request can contain the header \"x-tmp-header\" which will set a temporary header good only for the current request. This only works if the headers are set and then a 301 or 302 redirect is issued. This is functionally a per-file-http header. The value should be url encoded: \"x-tmp-header: MyCustomHeader%3A%20hello%20world\"","title":"Setting Temporary Custom Http Headers"},{"location":"drm/","text":"DRM Tinfoil supports encrypting custom index jsons, to prevent unauthorized redistribution of direct links to your private content. How It Works It works by generating a random AES-128-ECB key, encrypting your content with that key, and then wrapping the key with asymetrical RSA OAEP 2048-bit and sending it to Tinfoil. How to Use You can use this simple python script (with the supplied public key) to encrypt your index or html files! Run encrypt.py input.json output.tfl to encrypt via command line. encrypt.py public.key","title":"DRM"},{"location":"drm/#drm","text":"Tinfoil supports encrypting custom index jsons, to prevent unauthorized redistribution of direct links to your private content.","title":"DRM"},{"location":"drm/#how-it-works","text":"It works by generating a random AES-128-ECB key, encrypting your content with that key, and then wrapping the key with asymetrical RSA OAEP 2048-bit and sending it to Tinfoil.","title":"How It Works"},{"location":"drm/#how-to-use","text":"You can use this simple python script (with the supplied public key) to encrypt your index or html files! Run encrypt.py input.json output.tfl to encrypt via command line. encrypt.py public.key","title":"How to Use"},{"location":"mtp/","text":"MTP Server MTP is a driverless way to transfer files from your Nintendo Switch to your PC. It can transfer any file under 4GB. You simply connect your USB cable from your Switch to your PC and start Tinfoil. Installed Lists all of your currently installed applications as a virtual NSP file. CVopying any of these files to your PC allows you to dump any installed application (under 4GB) to your PC. Copying a NSP or NSZ file to this directory immediately installs that file. Firmware Lists a single NSP file that represents your currently installed firmware. Copying this file allows you to backup your firmware. Copying a firmware NSP file to this directory immediately installs that firmware. Index Lists all remote NSP files indexed by Tinfoil. This allows you to copy remote files to your PC. This however is limited by strict timeout values, therefore it will only work if your remote file has fast response times. System Files on your Nintendo Switch's system partition. User Files on your Nintendo Switch's user partition. sdcard Files on your Nintendo Switch's microSD card.","title":"MTP"},{"location":"mtp/#mtp-server","text":"MTP is a driverless way to transfer files from your Nintendo Switch to your PC. It can transfer any file under 4GB. You simply connect your USB cable from your Switch to your PC and start Tinfoil.","title":"MTP Server"},{"location":"mtp/#installed","text":"Lists all of your currently installed applications as a virtual NSP file. CVopying any of these files to your PC allows you to dump any installed application (under 4GB) to your PC. Copying a NSP or NSZ file to this directory immediately installs that file.","title":"Installed"},{"location":"mtp/#firmware","text":"Lists a single NSP file that represents your currently installed firmware. Copying this file allows you to backup your firmware. Copying a firmware NSP file to this directory immediately installs that firmware.","title":"Firmware"},{"location":"mtp/#index","text":"Lists all remote NSP files indexed by Tinfoil. This allows you to copy remote files to your PC. This however is limited by strict timeout values, therefore it will only work if your remote file has fast response times.","title":"Index"},{"location":"mtp/#system","text":"Files on your Nintendo Switch's system partition.","title":"System"},{"location":"mtp/#user","text":"Files on your Nintendo Switch's user partition.","title":"User"},{"location":"mtp/#sdcard","text":"Files on your Nintendo Switch's microSD card.","title":"sdcard"},{"location":"network/","text":"NUT NUT is the simplest way to install over the network. It is a piece of software that will serve your NSP's from your PC to your switch over the network, or through USB. All NSP's must have \"[titleid]\" in the file name to be indexed by NUT to show up in \"New Games\", \"New DLC\", and \"New Updates\". You can download NUT at https://github.com/blawar/nut/. HTTP / HTTPS Tinfoil downloads the html (or json) and parses out the links. Tinfoil supports relative paths, and absolute if you want to link to a different server, or even another device such as your microSD card. Tinfoil is known to work with Windows IIS, Apache, and Nginx. Though it should work with any HTTP server that supports ranged requests. Headers Sent Tinfoil will send a few custom headers when requesting a directory only (not files): Theme Hash The user's current Tinfoil theme hash is sent via \"Theme: XXXXXXXXXXXXXXX\". Host Signature A signature of the request Url scheme and hostname is sent via \"HAUTH: XXXXXXXXXXXXXX\". This value is unique to your domain, and helps prevent forged requests. Simply verify that the client always sends the correct value. Do not share this value. Host Signature A signature of the entire request Url is sent via \"UAUTH: XXXXXXXXXXXXXX\". This value is unique to your domain, and helps prevent forged requests. Simply verify that the client always sends the correct value. Do not share this value. User Fingerprint A unique user fingerprint is sent via \"UID: XXXXXXXXXXXXXX\". User Language Tinfoil's current language setting is set via \"Language: XXXXXXXXXXXXXX\". Tinfoil Version The client's Tinfoil version is sent via \"Version: 7.00\". Basic Directory Serving Just enable directory listing on your web server, and Tinfoil will automatically parse the links. Your web server will automatically generate the html! Authorization Basic Auth Basic HTTP authentication is supported, to prevent unauthorized users from accessing your files. Client Certificate Auth A custom client certificate may be specified with a custom index file. FTP / FTPS Tinfoil is known to work with Windows IIS FTP server, and FileZilla. Though it works with many more servers. Samba / SMB Tinfoil supports SMB / Windows File Shares. Google Drive All google drive links use the gdrive: scheme within Tinfoil, however there are three different modes with different priority levels. 1Fichier This requires a 1Fichier account. Generate a 1F api key in your 1F account settings, then input this API key in Tinfoil's options screen (case sensitive). Accessing your private 1F files Go to file browser and add a new location: protocol is 1F, leave everything else the same. This will only list files and directories associated with your 1F account. Public 1F files Tinfoil does not currently support listing public 1F directories, however you can generate an index of 1F file links using the following format: 1f:file_id#name.txt Split files (JBOD) If your filesystem / storage provider has a max file size, tinfoil supports split files using an index. A number in the path changes the file / chunk size. It can be changed at any time. Example index file entry: jbod:10000000/sdmc%3A%2Fbah%2Fxaa/sdmc%3A%2Fbah%2Fxab/sdmc%3A%2Fbah%2Fxac/sdmc%3A%2Fbah%2Fxad/sdmc%3A%2Fbah%2Fxae/sdmc%3A%2Fbah%2Fxaf/sdmc%3A%2Fbah%2Fxag/sdmc%3A%2Fbah%2Fxah/sdmc%3A%2Fbah%2Fxai/4036670/sdmc%3A%2Fbah%2Fxaj#filename.zip The first number is the size of the following chunks. The chunk size can be changed at anytime, and is often done so for the last chunk since it is often smaller. The chunks are urlencoded and seperated by forward slashes. Embedding files within files with offsets (JBOD) jbod supports offsets (in decimal) for embedding data within files (the offset is 100, the size is 1234): jbod:offset/100/1234/sdmc%3A%2Ftest.file Encrypting files (JBOD) jbod supports decrypting files. Only AES-128-ECB is currently supported. 33333333333333333333333333333333 is the encryption key. jbod:aes128/33333333333333333333333333333333/offset/0/1234/sdmc%3A%2Ftest.file An example python script to encrypt the files is located here: encrypt_nsz.py Packing files (JBOD) JBOD allows you to pack more than one file into a single file and then reference each file using offsets and sizes. An example python script to pack multiple files is located here: pack.py pack.py \"c:\\nsz\\dlc\" -o packed.bin --max-size 3000000 URL Format Both files and folders follow the same format. If specifying by the google file id, use gdrive:AAAAAAAAAAAAAAAAA (notice lack of forward slash). If specifying a path (only works with OAuth) use gdrive:/root/folder1/file.zip Auth OAuth Google Drive OAuth has the highest priority and will always be used if setup. OAuth is the only method to access and list private files. You must set up google drive OAuth within NUT, and then connect Tinfoil to NUT via network or USB to transfer the OAuth token(s). API Key Specifying an API key allows you to do authed requests to access private files, however listing files will not work. Public This is the least reliable, however it supports listing and downloading public files. Dropbox Access Token You need an API key to use this. Go to https://www.dropbox.com/developers/apps and create a new app, and then click the \"generate access token\" button to generate an access token to use with Tinfoil. Adding the location You can edit the locations.conf file directly by adding an entry for dropbox://token:XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX@api.dropbox.com/ where XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX is your access token.","title":"Network Install"},{"location":"network/#nut","text":"NUT is the simplest way to install over the network. It is a piece of software that will serve your NSP's from your PC to your switch over the network, or through USB. All NSP's must have \"[titleid]\" in the file name to be indexed by NUT to show up in \"New Games\", \"New DLC\", and \"New Updates\". You can download NUT at https://github.com/blawar/nut/.","title":"NUT"},{"location":"network/#http-https","text":"Tinfoil downloads the html (or json) and parses out the links. Tinfoil supports relative paths, and absolute if you want to link to a different server, or even another device such as your microSD card. Tinfoil is known to work with Windows IIS, Apache, and Nginx. Though it should work with any HTTP server that supports ranged requests.","title":"HTTP / HTTPS"},{"location":"network/#headers-sent","text":"Tinfoil will send a few custom headers when requesting a directory only (not files):","title":"Headers Sent"},{"location":"network/#theme-hash","text":"The user's current Tinfoil theme hash is sent via \"Theme: XXXXXXXXXXXXXXX\".","title":"Theme Hash"},{"location":"network/#host-signature","text":"A signature of the request Url scheme and hostname is sent via \"HAUTH: XXXXXXXXXXXXXX\". This value is unique to your domain, and helps prevent forged requests. Simply verify that the client always sends the correct value. Do not share this value.","title":"Host Signature"},{"location":"network/#host-signature_1","text":"A signature of the entire request Url is sent via \"UAUTH: XXXXXXXXXXXXXX\". This value is unique to your domain, and helps prevent forged requests. Simply verify that the client always sends the correct value. Do not share this value.","title":"Host Signature"},{"location":"network/#user-fingerprint","text":"A unique user fingerprint is sent via \"UID: XXXXXXXXXXXXXX\".","title":"User Fingerprint"},{"location":"network/#user-language","text":"Tinfoil's current language setting is set via \"Language: XXXXXXXXXXXXXX\".","title":"User Language"},{"location":"network/#tinfoil-version","text":"The client's Tinfoil version is sent via \"Version: 7.00\".","title":"Tinfoil Version"},{"location":"network/#basic-directory-serving","text":"Just enable directory listing on your web server, and Tinfoil will automatically parse the links. Your web server will automatically generate the html!","title":"Basic Directory Serving"},{"location":"network/#authorization","text":"","title":"Authorization"},{"location":"network/#basic-auth","text":"Basic HTTP authentication is supported, to prevent unauthorized users from accessing your files.","title":"Basic Auth"},{"location":"network/#client-certificate-auth","text":"A custom client certificate may be specified with a custom index file.","title":"Client Certificate Auth"},{"location":"network/#ftp-ftps","text":"Tinfoil is known to work with Windows IIS FTP server, and FileZilla. Though it works with many more servers.","title":"FTP / FTPS"},{"location":"network/#samba-smb","text":"Tinfoil supports SMB / Windows File Shares.","title":"Samba / SMB"},{"location":"network/#google-drive","text":"All google drive links use the gdrive: scheme within Tinfoil, however there are three different modes with different priority levels.","title":"Google Drive"},{"location":"network/#1fichier","text":"This requires a 1Fichier account. Generate a 1F api key in your 1F account settings, then input this API key in Tinfoil's options screen (case sensitive).","title":"1Fichier"},{"location":"network/#accessing-your-private-1f-files","text":"Go to file browser and add a new location: protocol is 1F, leave everything else the same. This will only list files and directories associated with your 1F account.","title":"Accessing your private 1F files"},{"location":"network/#public-1f-files","text":"Tinfoil does not currently support listing public 1F directories, however you can generate an index of 1F file links using the following format: 1f:file_id#name.txt","title":"Public 1F files"},{"location":"network/#split-files-jbod","text":"If your filesystem / storage provider has a max file size, tinfoil supports split files using an index. A number in the path changes the file / chunk size. It can be changed at any time. Example index file entry: jbod:10000000/sdmc%3A%2Fbah%2Fxaa/sdmc%3A%2Fbah%2Fxab/sdmc%3A%2Fbah%2Fxac/sdmc%3A%2Fbah%2Fxad/sdmc%3A%2Fbah%2Fxae/sdmc%3A%2Fbah%2Fxaf/sdmc%3A%2Fbah%2Fxag/sdmc%3A%2Fbah%2Fxah/sdmc%3A%2Fbah%2Fxai/4036670/sdmc%3A%2Fbah%2Fxaj#filename.zip The first number is the size of the following chunks. The chunk size can be changed at anytime, and is often done so for the last chunk since it is often smaller. The chunks are urlencoded and seperated by forward slashes.","title":"Split files (JBOD)"},{"location":"network/#embedding-files-within-files-with-offsets-jbod","text":"jbod supports offsets (in decimal) for embedding data within files (the offset is 100, the size is 1234): jbod:offset/100/1234/sdmc%3A%2Ftest.file","title":"Embedding files within files with offsets (JBOD)"},{"location":"network/#encrypting-files-jbod","text":"jbod supports decrypting files. Only AES-128-ECB is currently supported. 33333333333333333333333333333333 is the encryption key. jbod:aes128/33333333333333333333333333333333/offset/0/1234/sdmc%3A%2Ftest.file An example python script to encrypt the files is located here: encrypt_nsz.py","title":"Encrypting files (JBOD)"},{"location":"network/#packing-files-jbod","text":"JBOD allows you to pack more than one file into a single file and then reference each file using offsets and sizes. An example python script to pack multiple files is located here: pack.py pack.py \"c:\\nsz\\dlc\" -o packed.bin --max-size 3000000","title":"Packing files (JBOD)"},{"location":"network/#url-format","text":"Both files and folders follow the same format. If specifying by the google file id, use gdrive:AAAAAAAAAAAAAAAAA (notice lack of forward slash). If specifying a path (only works with OAuth) use gdrive:/root/folder1/file.zip","title":"URL Format"},{"location":"network/#auth","text":"","title":"Auth"},{"location":"network/#oauth","text":"Google Drive OAuth has the highest priority and will always be used if setup. OAuth is the only method to access and list private files. You must set up google drive OAuth within NUT, and then connect Tinfoil to NUT via network or USB to transfer the OAuth token(s).","title":"OAuth"},{"location":"network/#api-key","text":"Specifying an API key allows you to do authed requests to access private files, however listing files will not work.","title":"API Key"},{"location":"network/#public","text":"This is the least reliable, however it supports listing and downloading public files.","title":"Public"},{"location":"network/#dropbox","text":"Access Token You need an API key to use this. Go to https://www.dropbox.com/developers/apps and create a new app, and then click the \"generate access token\" button to generate an access token to use with Tinfoil. Adding the location You can edit the locations.conf file directly by adding an entry for dropbox://token:XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX@api.dropbox.com/ where XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX is your access token.","title":"Dropbox"},{"location":"usb/","text":"Tinfoil Documentation For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"USB Install"},{"location":"usb/#tinfoil-documentation","text":"For full documentation visit mkdocs.org .","title":"Tinfoil Documentation"},{"location":"usb/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"usb/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"}]}